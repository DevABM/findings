Amazon API Gateway. 
Amazon API Gateway is a fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale. 
With a few clicks on the AWS Management Console, you can create rest and web socket APIs that act as a front door for applications to access data, business logic, or functionality from your back-end services, such as workloads running on Amazon Elastic Compute Cloud or code running on AWS Lambda. 
API Gateway Architecture 
You can create REST APIs that are HTTP-based and implement standard methods such as GET, POST, PUT, PATCH, and DELETE. 
IoT devices or applications might require API interfaces for internal systems, such as dashboards for remote technicians, and external systems, such as a home consumer mobile application. 
You can securely expose REST APIs only to services and resources inside your virtual private Cloud or those connected via direct connect to your own data centers. 
Build real-time two-way communication applications, such as chat apps and streaming dashboards. 
Gateway maintains a persistent connection between clients, handles message transfer, and pushes data through back-end servers. Cash the output of API calls to ensure that back-end operations with stand traffic spikes, and back-end systems are not unnecessarily called. The API Gateway console is integrated with Amazon CloudWatch. You get back-end performance metrics such as API calls, latency, and error rates. You can also log API execution errors to CloudWatch logs to make debugging easier. As your front door, it helps you manage traffic to your back-end systems by allowing you to set throttling rules based on the number of requests per second for each HTTP method in your APIs. And to authorize and verify API requests, you can use AWS identity and access management. You can also use AWS Lambda functions to verify and authorize bearer tokens, such as JWT tokens or Samla assertions. Main components of a REST API. Let's start with the component called resource. A resource is a typed object that is part of your API's domain. If you are building a pet store application, this would be the pets. And as a REST API, you assign methods against those resources and access them at the end of a URL. Each resource can support one or more of the standard HTTP methods. For this example, we use a simplified pet store API that exposes the method get at /pets and a method get at /pets/petid. You interact with the resources inside your application through the endpoints and what you respond with is a representation of your resource. This representation may be HTML for a web application, but it could be XML or JSON or any other kind of format that you have. You go about creating it in just three easy ways. Next thing you need to do is to create your resources. This is as simple as typing in a name and typing in the URL endpoint that you want to be able to access that resource. Then you need to assign and attach your HTTP methods. So you can just assign gets, inputs, and posts. At the end of those methods you can assign any publicly accessible endpoint. You can proxy you and applique running on EC2. You can proxy you and other applique running on the internet. you can use no servers and run lambda functions in response to API calls. And it is just about deploying your API. API Gateway provides the possibility to deploy to multiple and arbitrary environment stages for your API. (buzzing) (breathing heavily) (breathing) (buzzing) (breathing)